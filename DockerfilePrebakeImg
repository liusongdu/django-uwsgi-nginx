# https://medium.com/swlh/alpine-slim-stretch-buster-jessie-bullseye-bookworm-what-are-the-differences-in-docker-62171ed4531d

# Ubuntu base image is generally smaller than Debian.
# FROM ubuntu:20.04
FROM debian:buster-slim

MAINTAINER Leo Du <liusongdu@hotmail.com>

ENV PYTHON_VERSION 3.9.2

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# # > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# For installing tzdata in Ubuntu 18.04 and above
ENV DEBIAN_FRONTEND="noninteractive" TZ="UTC"

# Install required packages and remove the apt packages cache when done.
# Install tk-dev to solve issue (Error msg: ModuleNotFoundError: No module named 'pyexpat')
# libffi-dev are mandatory
# gnupg - gpg
# gcc - no acceptable C compiler found in $PATH
# libssl-dev - ssl module in Python
# libmysqlclient-dev
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y \
        wget \
        libffi-dev \
        libssl-dev \
        gnupg \
        gcc \
        default-libmysqlclient-dev \

	ca-certificates \
	netbase \
	tzdata \
        dpkg-dev \
	libbluetooth-dev \
	libbz2-dev \
	libc6-dev \
	libexpat1-dev \
	libgdbm-dev \
	liblzma-dev \
	libncursesw5-dev \
	libreadline-dev \
	libsqlite3-dev \
	make \
	uuid-dev \
	xz-utils \
	zlib1g-dev \
        dirmngr && \
    apt-get install -y --no-install-recommends tk-dev && \
    rm -rf /var/lib/apt/lists/*

ENV GPG_KEY E3FF2839C048B25C084DEBE9B26995E310250568

RUN set -ex \
        \
        && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
        && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
        && export GNUPGHOME="$(mktemp -d)" \
        && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
        && gpg --batch --verify python.tar.xz.asc python.tar.xz \
        && { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
        && rm -rf "$GNUPGHOME" python.tar.xz.asc \
        && mkdir -p /usr/src/python \
        && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
        && rm python.tar.xz \
        \
        && cd /usr/src/python \
        && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
        && ./configure \
                --build="$gnuArch" \
                --enable-loadable-sqlite-extensions \
                --enable-optimizations \
                --enable-option-checking=fatal \
                --enable-shared \
                --with-system-expat \
                --with-system-ffi \
                --without-ensurepip \
        && make -j "$(nproc)" \
# setting PROFILE_TASK makes "--enable-optimizations" reasonable: https://bugs.python.org/issue36044 / https://github.com/docker-library/python/issues/160#issuecomment-509426916
                PROFILE_TASK='-m test.regrtest --pgo \
                        test_array \
                        test_base64 \
                        test_binascii \
                        test_binhex \
                        test_binop \
                        test_bytes \
                        test_c_locale_coercion \
                        test_class \
                        test_cmath \
                        test_codecs \
                        test_compile \
                        test_complex \
                        test_csv \
                        test_decimal \
                        test_dict \
                        test_float \
                        test_fstring \
                        test_hashlib \
                        test_io \
                        test_iter \
                        test_json \
                        test_long \
                        test_math \
                        test_memoryview \
                        test_pickle \
                        test_re \
                        test_set \
                        test_slice \
                        test_struct \
                        test_threading \
                        test_time \
                        test_traceback \
                        test_unicode \
                ' \
        && make install \
        && rm -rf /usr/src/python \
        \
        && find /usr/local -depth \
                \( \
                        \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
                        -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name '*.a' \) \) \
                        -o \( -type f -a -name 'wininst-*.exe' \) \
                \) -exec rm -rf '{}' + \
        \
        && ldconfig

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
        && ln -s idle3 idle \
        && ln -s pydoc3 pydoc \
        && ln -s python3 python \
        && ln -s python3-config python-config

# Install pip
#RUN python -m pip install --upgrade pip setuptools --no-deps
ENV PYTHON_PIP_VERSION 21.0.1
ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/b60e2320d9e8d02348525bd74e871e466afdf77c/get-pip.py
ENV PYTHON_GET_PIP_SHA256 c3b81e5d06371e135fb3156dc7d8fd6270735088428c4a9a5ec1f342e2024565

RUN set -ex; \
        \
        wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
        echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -; \
        \
        python get-pip.py \
                --disable-pip-version-check \
                --no-cache-dir \
                "pip==$PYTHON_PIP_VERSION" \
        ; \
        pip --version; \
        \
        find /usr/local -depth \
                \( \
                        \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
                        -o \
                        \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
                \) -exec rm -rf '{}' +; \
        rm -f get-pip.py
